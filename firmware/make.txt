yosys -p 'synth_ice40 -top top -json top.json' top.v

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4081 (git sha1 83a21814, clang 7.0.1-8+rpi3+deb10u2 -fPIC -Os)


-- Parsing `top.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: top.v
Parsing Verilog input from `top.v' to AST representation.
Generating RTLIL representation for module `\spi_slave'.
Generating RTLIL representation for module `\spi_if'.
Warning: wire '\o_ioc' is assigned in a block at spi_if.v:65.21-65.43.
Warning: wire '\o_cs' is assigned in a block at spi_if.v:67.32-67.47.
Warning: wire '\o_cs' is assigned in a block at spi_if.v:68.32-68.47.
Warning: wire '\o_cs' is assigned in a block at spi_if.v:69.32-69.47.
Warning: wire '\o_cs' is assigned in a block at spi_if.v:70.32-70.47.
Warning: wire '\o_fetch_cmd' is assigned in a block at spi_if.v:76.25-76.44.
Warning: wire '\o_load_cmd' is assigned in a block at spi_if.v:80.21-80.39.
Warning: wire '\o_data_in' is assigned in a block at spi_if.v:86.21-86.43.
Warning: wire '\o_load_cmd' is assigned in a block at spi_if.v:87.21-87.39.
Warning: wire '\o_fetch_cmd' is assigned in a block at spi_if.v:93.21-93.40.
Warning: wire '\o_load_cmd' is assigned in a block at spi_if.v:94.21-94.39.
Warning: wire '\o_cs' is assigned in a block at spi_if.v:95.21-95.36.
Warning: wire '\o_fetch_cmd' is assigned in a block at spi_if.v:101.17-101.36.
Warning: wire '\w_tx_byte' is assigned in a block at spi_if.v:104.17-104.40.
Warning: wire '\o_load_cmd' is assigned in a block at spi_if.v:108.17-108.35.
Generating RTLIL representation for module `\sys_ctrl'.
Warning: wire '\o_data_out' is assigned in a block at sys_ctrl.v:33.41-33.69.
Warning: wire '\o_data_out' is assigned in a block at sys_ctrl.v:34.41-34.69.
Warning: wire '\o_data_out' is assigned in a block at sys_ctrl.v:35.34-35.55.
Generating RTLIL representation for module `\io_ctrl'.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:132.41-132.69.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:136.25-136.54.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:137.25-137.51.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:142.25-142.52.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:143.25-143.52.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:144.25-144.54.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:145.25-145.52.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:146.25-146.50.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:151.25-151.53.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:156.25-156.49.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:161.25-161.56.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:162.25-162.63.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:163.25-163.63.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:164.25-164.55.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:165.25-165.57.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:166.25-166.55.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:167.25-167.54.
Warning: wire '\o_data_out' is assigned in a block at io_ctrl.v:168.25-168.52.
Generating RTLIL representation for module `\smi_ctrl'.
Warning: wire '\o_data_out' is assigned in a block at smi_ctrl.v:29.41-29.69.
Warning: wire '\o_data_out' is assigned in a block at smi_ctrl.v:33.13-33.38.
Generating RTLIL representation for module `\top'.
top.v:102: Warning: Identifier `\r_reset' is implicitly declared.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json top.json' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \smi_ctrl
Used module:     \io_ctrl
Used module:     \sys_ctrl
Used module:     \spi_if
Used module:         \spi_slave

2.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \smi_ctrl
Used module:     \io_ctrl
Used module:     \sys_ctrl
Used module:     \spi_if
Used module:         \spi_slave
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\io_ctrl.$proc$io_ctrl.v:123$25'.
Cleaned up 1 empty switch.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$279 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1290$272 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$268 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1159$261 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1090$258 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1042$255 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:973$252 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:925$249 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$241 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:713$234 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$230 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:582$223 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:513$220 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:465$217 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:396$214 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:348$211 in module SB_DFFSR.
Marked 1 switch rules as full_case in process $proc$smi_ctrl.v:24$33 in module smi_ctrl.
Marked 2 switch rules as full_case in process $proc$io_ctrl.v:123$25 in module io_ctrl.
Marked 6 switch rules as full_case in process $proc$spi_if.v:57$16 in module spi_if.
Marked 1 switch rules as full_case in process $proc$spi_slave.v:70$11 in module spi_slave.
Marked 1 switch rules as full_case in process $proc$spi_slave.v:49$5 in module spi_slave.
Marked 2 switch rules as full_case in process $proc$spi_slave.v:29$1 in module spi_slave.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 10 redundant assignments.
Promoted 36 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$282'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$278'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$271'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$267'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$260'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$257'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$254'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$251'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$248'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$246'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$244'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$240'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$233'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$229'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$222'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$219'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$216'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$213'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$210'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$208'.
  Set init value: \Q = 1'0
Found init rule in `\top.$proc$top.v:0$38'.
  Set init value: \r_counter = 2'00
Found init rule in `\io_ctrl.$proc$io_ctrl.v:0$32'.
  Set init value: \debug_mode = 2'00
  Set init value: \rf_mode = 3'000
  Set init value: \ldo2v8_state = 1'0
  Set init value: \led0_state = 1'0
  Set init value: \led1_state = 1'0
Found init rule in `\spi_if.$proc$spi_if.v:0$21'.
  Set init value: \state_if = 3'000

2.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$279'.
Found async reset \R in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$268'.
Found async reset \S in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1090$258'.
Found async reset \R in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:973$252'.
Found async reset \S in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$241'.
Found async reset \R in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$230'.
Found async reset \S in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:513$220'.
Found async reset \R in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:396$214'.
Found async reset \i_spi_cs_b in `\spi_slave.$proc$spi_slave.v:29$1'.

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$282'.
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$279'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$278'.
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1290$272'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$271'.
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$268'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$267'.
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1159$261'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$260'.
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1090$258'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$257'.
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1042$255'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$254'.
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:973$252'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$251'.
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:925$249'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$248'.
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$247'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$246'.
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:846$245'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$244'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$241'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$240'.
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:713$234'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$233'.
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$230'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$229'.
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:582$223'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$222'.
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:513$220'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$219'.
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:465$217'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$216'.
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:396$214'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$213'.
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:348$211'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$210'.
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:305$209'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$208'.
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:269$207'.
Creating decoders for process `\top.$proc$top.v:0$38'.
Creating decoders for process `\top.$proc$top.v:156$36'.
     1/1: $0\r_tx_data[7:0]
Creating decoders for process `\smi_ctrl.$proc$smi_ctrl.v:24$33'.
     1/1: $0\o_data_out[7:0]
Creating decoders for process `\io_ctrl.$proc$io_ctrl.v:0$32'.
Creating decoders for process `\io_ctrl.$proc$io_ctrl.v:123$25'.
     1/23: $0\o_data_out[7:0] [6]
     2/23: $0\o_data_out[7:0] [5]
     3/23: $0\o_data_out[7:0] [3]
     4/23: $0\o_data_out[7:0] [2]
     5/23: $0\o_data_out[7:0] [0]
     6/23: $0\o_data_out[7:0] [7]
     7/23: $0\o_data_out[7:0] [4]
     8/23: $0\o_data_out[7:0] [1]
     9/23: $0\tr_vc_1_b_state[0:0]
    10/23: $0\tr_vc_1_state[0:0]
    11/23: $0\rx_h_b_state[0:0]
    12/23: $0\rx_h_state[0:0]
    13/23: $0\lna_tx_shutdown_state[0:0]
    14/23: $0\lna_rx_shutdown_state[0:0]
    15/23: $0\mixer_en_state[0:0]
    16/23: $0\pmod_state[7:0]
    17/23: $0\pmod_dir_state[7:0]
    18/23: $0\led1_state[0:0]
    19/23: $0\led0_state[0:0]
    20/23: $0\ldo2v8_state[0:0]
    21/23: $0\rf_mode[2:0]
    22/23: $0\debug_mode[1:0]
    23/23: $0\tr_vc_2_state[0:0]
Creating decoders for process `\sys_ctrl.$proc$sys_ctrl.v:28$22'.
     1/1: $0\o_data_out[7:0]
Creating decoders for process `\spi_if.$proc$spi_if.v:0$21'.
Creating decoders for process `\spi_if.$proc$spi_if.v:57$16'.
     1/11: $3\state_if[2:0]
     2/11: $2\state_if[2:0]
     3/11: $2\o_ioc[4:0]
     4/11: $1\state_if[2:0]
     5/11: $1\o_ioc[4:0]
     6/11: $0\w_tx_byte[7:0]
     7/11: $0\r_tx_data_valid[0:0]
     8/11: $0\o_load_cmd[0:0]
     9/11: $0\o_fetch_cmd[0:0]
    10/11: $0\o_cs[3:0]
    11/11: $0\o_data_in[7:0]
Creating decoders for process `\spi_slave.$proc$spi_slave.v:70$11'.
     1/3: $0\r_tx_byte[7:0]
     2/3: $0\r_tx_bit_count[2:0]
     3/3: $0\o_spi_miso[0:0]
Creating decoders for process `\spi_slave.$proc$spi_slave.v:64$9'.
Creating decoders for process `\spi_slave.$proc$spi_slave.v:49$5'.
     1/2: $0\o_rx_data_valid[0:0]
     2/2: $0\o_rx_byte[7:0]
Creating decoders for process `\spi_slave.$proc$spi_slave.v:29$1'.
     1/4: $0\r_rx_bit_count[2:0]
     2/4: $0\r_rx_done[0:0]
     3/4: $0\r_rx_byte[7:0]
     4/4: $0\r_temp_rx_byte[7:0]

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\r_reset_b' from process `\top.$proc$top.v:0$38'.

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$279'.
  created $adff cell `$procdff$982' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1290$272'.
  created $dff cell `$procdff$983' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$268'.
  created $adff cell `$procdff$984' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1159$261'.
  created $dff cell `$procdff$985' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1090$258'.
  created $adff cell `$procdff$986' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1042$255'.
  created $dff cell `$procdff$987' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:973$252'.
  created $adff cell `$procdff$988' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:925$249'.
  created $dff cell `$procdff$989' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$247'.
  created $dff cell `$procdff$990' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:846$245'.
  created $dff cell `$procdff$991' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$241'.
  created $adff cell `$procdff$992' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:713$234'.
  created $dff cell `$procdff$993' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$230'.
  created $adff cell `$procdff$994' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:582$223'.
  created $dff cell `$procdff$995' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:513$220'.
  created $adff cell `$procdff$996' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:465$217'.
  created $dff cell `$procdff$997' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:396$214'.
  created $adff cell `$procdff$998' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:348$211'.
  created $dff cell `$procdff$999' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:305$209'.
  created $dff cell `$procdff$1000' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:269$207'.
  created $dff cell `$procdff$1001' with positive edge clock.
Creating register for signal `\top.\r_counter' using process `\top.$proc$top.v:156$36'.
  created $dff cell `$procdff$1002' with positive edge clock.
Creating register for signal `\top.\r_tx_data' using process `\top.$proc$top.v:156$36'.
  created $dff cell `$procdff$1003' with positive edge clock.
Creating register for signal `\smi_ctrl.\o_data_out' using process `\smi_ctrl.$proc$smi_ctrl.v:24$33'.
  created $dff cell `$procdff$1004' with positive edge clock.
Creating register for signal `\io_ctrl.\o_data_out' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1005' with positive edge clock.
Creating register for signal `\io_ctrl.\debug_mode' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1006' with positive edge clock.
Creating register for signal `\io_ctrl.\rf_mode' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1007' with positive edge clock.
Creating register for signal `\io_ctrl.\ldo2v8_state' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1008' with positive edge clock.
Creating register for signal `\io_ctrl.\led0_state' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1009' with positive edge clock.
Creating register for signal `\io_ctrl.\led1_state' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1010' with positive edge clock.
Creating register for signal `\io_ctrl.\pmod_dir_state' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1011' with positive edge clock.
Creating register for signal `\io_ctrl.\pmod_state' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1012' with positive edge clock.
Creating register for signal `\io_ctrl.\mixer_en_state' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1013' with positive edge clock.
Creating register for signal `\io_ctrl.\lna_rx_shutdown_state' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1014' with positive edge clock.
Creating register for signal `\io_ctrl.\lna_tx_shutdown_state' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1015' with positive edge clock.
Creating register for signal `\io_ctrl.\rx_h_state' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1016' with positive edge clock.
Creating register for signal `\io_ctrl.\rx_h_b_state' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1017' with positive edge clock.
Creating register for signal `\io_ctrl.\tr_vc_1_state' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1018' with positive edge clock.
Creating register for signal `\io_ctrl.\tr_vc_1_b_state' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1019' with positive edge clock.
Creating register for signal `\io_ctrl.\tr_vc_2_state' using process `\io_ctrl.$proc$io_ctrl.v:123$25'.
  created $dff cell `$procdff$1020' with positive edge clock.
Creating register for signal `\sys_ctrl.\o_data_out' using process `\sys_ctrl.$proc$sys_ctrl.v:28$22'.
  created $dff cell `$procdff$1021' with positive edge clock.
Creating register for signal `\spi_if.\o_ioc' using process `\spi_if.$proc$spi_if.v:57$16'.
  created $dff cell `$procdff$1022' with positive edge clock.
Creating register for signal `\spi_if.\o_data_in' using process `\spi_if.$proc$spi_if.v:57$16'.
  created $dff cell `$procdff$1023' with positive edge clock.
Creating register for signal `\spi_if.\o_cs' using process `\spi_if.$proc$spi_if.v:57$16'.
  created $dff cell `$procdff$1024' with positive edge clock.
Creating register for signal `\spi_if.\o_fetch_cmd' using process `\spi_if.$proc$spi_if.v:57$16'.
  created $dff cell `$procdff$1025' with positive edge clock.
Creating register for signal `\spi_if.\o_load_cmd' using process `\spi_if.$proc$spi_if.v:57$16'.
  created $dff cell `$procdff$1026' with positive edge clock.
Creating register for signal `\spi_if.\state_if' using process `\spi_if.$proc$spi_if.v:57$16'.
  created $dff cell `$procdff$1027' with positive edge clock.
Creating register for signal `\spi_if.\r_tx_data_valid' using process `\spi_if.$proc$spi_if.v:57$16'.
  created $dff cell `$procdff$1028' with positive edge clock.
Creating register for signal `\spi_if.\w_tx_byte' using process `\spi_if.$proc$spi_if.v:57$16'.
  created $dff cell `$procdff$1029' with positive edge clock.
Creating register for signal `\spi_slave.\o_spi_miso' using process `\spi_slave.$proc$spi_slave.v:70$11'.
  created $dff cell `$procdff$1030' with positive edge clock.
Creating register for signal `\spi_slave.\r_tx_bit_count' using process `\spi_slave.$proc$spi_slave.v:70$11'.
  created $dff cell `$procdff$1031' with positive edge clock.
Creating register for signal `\spi_slave.\r_tx_byte' using process `\spi_slave.$proc$spi_slave.v:70$11'.
  created $dff cell `$procdff$1032' with positive edge clock.
Creating register for signal `\spi_slave.\SCKr' using process `\spi_slave.$proc$spi_slave.v:64$9'.
  created $dff cell `$procdff$1033' with positive edge clock.
Creating register for signal `\spi_slave.\o_rx_data_valid' using process `\spi_slave.$proc$spi_slave.v:49$5'.
  created $dff cell `$procdff$1034' with positive edge clock.
Creating register for signal `\spi_slave.\o_rx_byte' using process `\spi_slave.$proc$spi_slave.v:49$5'.
  created $dff cell `$procdff$1035' with positive edge clock.
Creating register for signal `\spi_slave.\r2_rx_done' using process `\spi_slave.$proc$spi_slave.v:49$5'.
  created $dff cell `$procdff$1036' with positive edge clock.
Creating register for signal `\spi_slave.\r3_rx_done' using process `\spi_slave.$proc$spi_slave.v:49$5'.
  created $dff cell `$procdff$1037' with positive edge clock.
Creating register for signal `\spi_slave.\r_rx_bit_count' using process `\spi_slave.$proc$spi_slave.v:29$1'.
  created $adff cell `$procdff$1038' with positive edge clock and positive level reset.
Creating register for signal `\spi_slave.\r_temp_rx_byte' using process `\spi_slave.$proc$spi_slave.v:29$1'.
  created $dff cell `$procdff$1041' with positive edge clock.
Creating register for signal `\spi_slave.\r_rx_byte' using process `\spi_slave.$proc$spi_slave.v:29$1'.
  created $dff cell `$procdff$1044' with positive edge clock.
Creating register for signal `\spi_slave.\r_rx_done' using process `\spi_slave.$proc$spi_slave.v:29$1'.
  created $adff cell `$procdff$1045' with positive edge clock and positive level reset.

2.3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$282'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$279'.
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$279'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$278'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1290$272'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1290$272'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$271'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$268'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$268'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$267'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1159$261'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1159$261'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$260'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1090$258'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$257'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1042$255'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1042$255'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$254'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:973$252'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$251'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:925$249'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:925$249'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$248'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$247'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$247'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$246'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:846$245'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$244'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$241'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$241'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$240'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:713$234'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:713$234'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$233'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$230'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$230'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$229'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:582$223'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:582$223'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$222'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:513$220'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$219'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:465$217'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:465$217'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$216'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:396$214'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$213'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:348$211'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:348$211'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$210'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:305$209'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:305$209'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$208'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:269$207'.
Removing empty process `top.$proc$top.v:0$38'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:156$36'.
Removing empty process `top.$proc$top.v:156$36'.
Found and cleaned up 3 empty switches in `\smi_ctrl.$proc$smi_ctrl.v:24$33'.
Removing empty process `smi_ctrl.$proc$smi_ctrl.v:24$33'.
Removing empty process `io_ctrl.$proc$io_ctrl.v:0$32'.
Found and cleaned up 8 empty switches in `\io_ctrl.$proc$io_ctrl.v:123$25'.
Removing empty process `io_ctrl.$proc$io_ctrl.v:123$25'.
Found and cleaned up 3 empty switches in `\sys_ctrl.$proc$sys_ctrl.v:28$22'.
Removing empty process `sys_ctrl.$proc$sys_ctrl.v:28$22'.
Removing empty process `spi_if.$proc$spi_if.v:0$21'.
Found and cleaned up 6 empty switches in `\spi_if.$proc$spi_if.v:57$16'.
Removing empty process `spi_if.$proc$spi_if.v:57$16'.
Found and cleaned up 3 empty switches in `\spi_slave.$proc$spi_slave.v:70$11'.
Removing empty process `spi_slave.$proc$spi_slave.v:70$11'.
Removing empty process `spi_slave.$proc$spi_slave.v:64$9'.
Found and cleaned up 1 empty switch in `\spi_slave.$proc$spi_slave.v:49$5'.
Removing empty process `spi_slave.$proc$spi_slave.v:49$5'.
Found and cleaned up 2 empty switches in `\spi_slave.$proc$spi_slave.v:29$1'.
Removing empty process `spi_slave.$proc$spi_slave.v:29$1'.
Cleaned up 45 empty switches.

2.4. Executing FLATTEN pass (flatten design).
Deleting now unused module smi_ctrl.
Deleting now unused module io_ctrl.
Deleting now unused module sys_ctrl.
Deleting now unused module spi_if.
Deleting now unused module spi_slave.
<suppressed ~5 debug messages>

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).
Demoting inout port top.io_smi_data to input.

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~41 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 187 unused wires.
<suppressed ~4 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
Checking module top...
Warning: Wire top.\o_iq_tx_p is used but has no driver.
Warning: Wire top.\o_iq_tx_n is used but has no driver.
Warning: Wire top.\o_iq_tx_clk_p is used but has no driver.
Warning: Wire top.\o_iq_tx_clk_n is used but has no driver.
Warning: Wire top.\i_smi_a0_irq is used but has no driver.
Found and reported 5 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~333 debug messages>
Removed a total of 111 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\spi_if_ins.$procmux$850.
    dead port 2/2 on $mux $flatten\spi_if_ins.$procmux$852.
    dead port 2/2 on $mux $flatten\spi_if_ins.$procmux$860.
    dead port 2/2 on $mux $flatten\spi_if_ins.$procmux$868.
Removed 4 multiplexer ports.
<suppressed ~42 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $flatten\io_ctrl_ins.$procmux$619: { $auto$opt_reduce.cc:134:opt_mux$1049 $auto$opt_reduce.cc:134:opt_mux$1047 }
    New ctrl vector for $pmux cell $flatten\io_ctrl_ins.$procmux$640: { $auto$opt_reduce.cc:134:opt_mux$1053 $auto$opt_reduce.cc:134:opt_mux$1051 }
    New ctrl vector for $pmux cell $flatten\io_ctrl_ins.$procmux$661: { $auto$opt_reduce.cc:134:opt_mux$1057 $auto$opt_reduce.cc:134:opt_mux$1055 }
    New ctrl vector for $pmux cell $flatten\io_ctrl_ins.$procmux$682: { $auto$opt_reduce.cc:134:opt_mux$1061 $auto$opt_reduce.cc:134:opt_mux$1059 }
    New ctrl vector for $pmux cell $flatten\io_ctrl_ins.$procmux$703: { $auto$opt_reduce.cc:134:opt_mux$1065 $auto$opt_reduce.cc:134:opt_mux$1063 }
    New ctrl vector for $pmux cell $flatten\io_ctrl_ins.$procmux$577: { $auto$opt_reduce.cc:134:opt_mux$1069 $auto$opt_reduce.cc:134:opt_mux$1067 }
    New ctrl vector for $pmux cell $flatten\io_ctrl_ins.$procmux$814: { $auto$opt_reduce.cc:134:opt_mux$1073 $auto$opt_reduce.cc:134:opt_mux$1071 }
    New ctrl vector for $pmux cell $flatten\spi_if_ins.$procmux$856: { $flatten\spi_if_ins.$procmux$851_CMP $auto$opt_reduce.cc:134:opt_mux$1075 }
    New ctrl vector for $pmux cell $flatten\spi_if_ins.$procmux$913: { $flatten\spi_if_ins.$procmux$858_CMP $auto$opt_reduce.cc:134:opt_mux$1077 }
    New ctrl vector for $pmux cell $flatten\io_ctrl_ins.$procmux$598: { $auto$opt_reduce.cc:134:opt_mux$1081 $auto$opt_reduce.cc:134:opt_mux$1079 }
    New ctrl vector for $pmux cell $flatten\sys_ctrl_ins.$procmux$835: $auto$opt_reduce.cc:134:opt_mux$1083
  Optimizing cells in module \top.
Performed a total of 11 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

2.10.6. Executing OPT_DFF pass (perform DFF optimizations).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 125 unused wires.
<suppressed ~5 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~42 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.13. Executing OPT_DFF pass (perform DFF optimizations).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing FSM pass (extract and optimize FSM).

2.11.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.smi_ctrl_ins.o_data_out as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking top.spi_if_ins.o_cs as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking top.spi_if_ins.state_if as FSM state register:
    Register has an initialization value.
Not marking top.sys_ctrl_ins.o_data_out as FSM state register:
    Users of register don't seem to benefit from recoding.

2.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~42 debug messages>

2.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1003 ($dff) from module top (D = $0\r_tx_data[7:0], Q = \r_tx_data).
Adding EN signal on $flatten\sys_ctrl_ins.$procdff$1021 ($dff) from module top (D = 8'00000001, Q = \sys_ctrl_ins.o_data_out).
Setting constant 1-bit at position 0 on $auto$opt_dff.cc:764:run$1089 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$opt_dff.cc:764:run$1089 ($dffe) from module top.
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$1089 ($dffe) from module top.
Setting constant 0-bit at position 3 on $auto$opt_dff.cc:764:run$1089 ($dffe) from module top.
Setting constant 0-bit at position 4 on $auto$opt_dff.cc:764:run$1089 ($dffe) from module top.
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$1089 ($dffe) from module top.
Setting constant 0-bit at position 6 on $auto$opt_dff.cc:764:run$1089 ($dffe) from module top.
Setting constant 0-bit at position 7 on $auto$opt_dff.cc:764:run$1089 ($dffe) from module top.
Adding EN signal on $flatten\spi_if_ins.\spi.$procdff$1045 ($adff) from module top (D = $flatten\spi_if_ins.\spi.$0\r_rx_done[0:0], Q = \spi_if_ins.spi.r_rx_done).
Adding EN signal on $flatten\spi_if_ins.\spi.$procdff$1044 ($dff) from module top (D = { \spi_if_ins.spi.r_temp_rx_byte [6:0] \i_mosi }, Q = \spi_if_ins.spi.r_rx_byte).
Adding EN signal on $flatten\spi_if_ins.\spi.$procdff$1041 ($dff) from module top (D = { \spi_if_ins.spi.r_temp_rx_byte [6:0] \i_mosi }, Q = \spi_if_ins.spi.r_temp_rx_byte).
Adding EN signal on $flatten\spi_if_ins.\spi.$procdff$1035 ($dff) from module top (D = \spi_if_ins.spi.r_rx_byte, Q = \spi_if_ins.spi.o_rx_byte).
Adding EN signal on $flatten\spi_if_ins.\spi.$procdff$1032 ($dff) from module top (D = $flatten\spi_if_ins.\spi.$0\r_tx_byte[7:0], Q = \spi_if_ins.spi.r_tx_byte).
Adding SRST signal on $flatten\spi_if_ins.\spi.$procdff$1031 ($dff) from module top (D = $flatten\spi_if_ins.\spi.$procmux$958_Y, Q = \spi_if_ins.spi.r_tx_bit_count, rval = 3'110).
Adding EN signal on $auto$opt_dff.cc:702:run$1107 ($sdff) from module top (D = $flatten\spi_if_ins.\spi.$sub$spi_slave.v:78$13_Y [2:0], Q = \spi_if_ins.spi.r_tx_bit_count).
Adding EN signal on $flatten\spi_if_ins.\spi.$procdff$1030 ($dff) from module top (D = $flatten\spi_if_ins.\spi.$0\o_spi_miso[0:0], Q = \spi_if_ins.spi.o_spi_miso).
Adding EN signal on $flatten\spi_if_ins.$procdff$1029 ($dff) from module top (D = \r_tx_data, Q = \spi_if_ins.w_tx_byte).
Adding EN signal on $flatten\spi_if_ins.$procdff$1028 ($dff) from module top (D = $flatten\spi_if_ins.$0\r_tx_data_valid[0:0], Q = \spi_if_ins.r_tx_data_valid).
Adding EN signal on $flatten\spi_if_ins.$procdff$1027 ($dff) from module top (D = $flatten\spi_if_ins.$0\state_if[2:0], Q = \spi_if_ins.state_if).
Adding EN signal on $flatten\spi_if_ins.$procdff$1026 ($dff) from module top (D = $flatten\spi_if_ins.$0\o_load_cmd[0:0], Q = \spi_if_ins.o_load_cmd).
Adding EN signal on $flatten\spi_if_ins.$procdff$1025 ($dff) from module top (D = $flatten\spi_if_ins.$0\o_fetch_cmd[0:0], Q = \spi_if_ins.o_fetch_cmd).
Adding EN signal on $flatten\spi_if_ins.$procdff$1024 ($dff) from module top (D = $flatten\spi_if_ins.$procmux$934_Y, Q = \spi_if_ins.o_cs).
Adding EN signal on $flatten\spi_if_ins.$procdff$1023 ($dff) from module top (D = \spi_if_ins.spi.o_rx_byte, Q = \spi_if_ins.o_data_in).
Adding EN signal on $flatten\spi_if_ins.$procdff$1022 ($dff) from module top (D = \spi_if_ins.spi.o_rx_byte [4:0], Q = \spi_if_ins.o_ioc).
Adding SRST signal on $flatten\smi_ctrl_ins.$procdff$1004 ($dff) from module top (D = $flatten\smi_ctrl_ins.$procmux$472_Y, Q = \smi_ctrl_ins.o_data_out, rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$1162 ($sdff) from module top (D = 8'00000001, Q = \smi_ctrl_ins.o_data_out).
Setting constant 0-bit at position 1 on $auto$opt_dff.cc:764:run$1165 ($sdffe) from module top.
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$1165 ($sdffe) from module top.
Setting constant 0-bit at position 3 on $auto$opt_dff.cc:764:run$1165 ($sdffe) from module top.
Setting constant 0-bit at position 4 on $auto$opt_dff.cc:764:run$1165 ($sdffe) from module top.
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$1165 ($sdffe) from module top.
Setting constant 0-bit at position 6 on $auto$opt_dff.cc:764:run$1165 ($sdffe) from module top.
Setting constant 0-bit at position 7 on $auto$opt_dff.cc:764:run$1165 ($sdffe) from module top.
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1020 ($dff) from module top (D = $flatten\io_ctrl_ins.$0\tr_vc_2_state[0:0], Q = \io_ctrl_ins.tr_vc_2_state).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1019 ($dff) from module top (D = $flatten\io_ctrl_ins.$0\tr_vc_1_b_state[0:0], Q = \io_ctrl_ins.tr_vc_1_b_state).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1018 ($dff) from module top (D = $flatten\io_ctrl_ins.$0\tr_vc_1_state[0:0], Q = \io_ctrl_ins.tr_vc_1_state).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1017 ($dff) from module top (D = $flatten\io_ctrl_ins.$0\rx_h_b_state[0:0], Q = \io_ctrl_ins.rx_h_b_state).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1016 ($dff) from module top (D = $flatten\io_ctrl_ins.$0\rx_h_state[0:0], Q = \io_ctrl_ins.rx_h_state).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1015 ($dff) from module top (D = $flatten\io_ctrl_ins.$0\lna_tx_shutdown_state[0:0], Q = \io_ctrl_ins.lna_tx_shutdown_state).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1014 ($dff) from module top (D = $flatten\io_ctrl_ins.$0\lna_rx_shutdown_state[0:0], Q = \io_ctrl_ins.lna_rx_shutdown_state).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1013 ($dff) from module top (D = $flatten\io_ctrl_ins.$0\mixer_en_state[0:0], Q = \io_ctrl_ins.mixer_en_state).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1012 ($dff) from module top (D = \spi_if_ins.o_data_in, Q = \io_ctrl_ins.pmod_state).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1011 ($dff) from module top (D = \spi_if_ins.o_data_in, Q = \io_ctrl_ins.pmod_dir_state).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1010 ($dff) from module top (D = \spi_if_ins.o_data_in [1], Q = \io_ctrl_ins.led1_state).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1009 ($dff) from module top (D = \spi_if_ins.o_data_in [0], Q = \io_ctrl_ins.led0_state).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1008 ($dff) from module top (D = \spi_if_ins.o_data_in [2], Q = \io_ctrl_ins.ldo2v8_state).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1007 ($dff) from module top (D = \spi_if_ins.o_data_in [4:2], Q = \io_ctrl_ins.rf_mode).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1006 ($dff) from module top (D = \spi_if_ins.o_data_in [1:0], Q = \io_ctrl_ins.debug_mode).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1005 ($dff) from module top (D = { $flatten\io_ctrl_ins.$procmux$553_Y $flatten\io_ctrl_ins.$procmux$502_Y $flatten\io_ctrl_ins.$procmux$515_Y $flatten\io_ctrl_ins.$procmux$566_Y $flatten\io_ctrl_ins.$procmux$528_Y }, Q = \io_ctrl_ins.o_data_out [4:0]).
Adding EN signal on $flatten\io_ctrl_ins.$procdff$1005 ($dff) from module top (D = { $flatten\io_ctrl_ins.$procmux$541_Y $flatten\io_ctrl_ins.$procmux$478_Y $flatten\io_ctrl_ins.$procmux$490_Y }, Q = \io_ctrl_ins.o_data_out [7:5]).

2.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 66 unused cells and 59 unused wires.
<suppressed ~67 debug messages>

2.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~17 debug messages>

2.12.9. Rerunning OPT passes. (Maybe there is more to do..)

2.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

2.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~162 debug messages>
Removed a total of 54 cells.

2.12.13. Executing OPT_DFF pass (perform DFF optimizations).

2.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 54 unused wires.
<suppressed ~1 debug messages>

2.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.12.16. Rerunning OPT passes. (Maybe there is more to do..)

2.12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

2.12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.12.20. Executing OPT_DFF pass (perform DFF optimizations).

2.12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.12.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.12.23. Finished OPT passes. (There is nothing left to do.)

2.13. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:158$37 ($add).
Removed top 30 bits (of 32) from port Y of cell top.$add$top.v:158$37 ($add).
Removed top 1 bits (of 4) from port B of cell top.$procmux$466_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$procmux$467_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell top.$procmux$468_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\spi_if_ins.\spi.$eq$spi_slave.v:41$4 ($eq).
Removed top 1 bits (of 2) from port B of cell top.$flatten\spi_if_ins.\spi.$eq$spi_slave.v:65$10 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$flatten\spi_if_ins.\spi.$sub$spi_slave.v:78$13 ($sub).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\spi_if_ins.\spi.$sub$spi_slave.v:78$13 ($sub).
Removed cell top.$flatten\spi_if_ins.\spi.$procmux$951 ($mux).
Removed cell top.$flatten\spi_if_ins.\spi.$procmux$953 ($mux).
Removed cell top.$flatten\spi_if_ins.\spi.$procmux$963 ($mux).
Removed cell top.$flatten\spi_if_ins.\spi.$procmux$974 ($mux).
Removed top 1 bits (of 8) from FF cell top.$auto$opt_dff.cc:764:run$1098 ($dffe).
Removed top 1 bits (of 2) from port B of cell top.$flatten\spi_if_ins.$procmux$939_CMP0 ($eq).
Removed cell top.$flatten\spi_if_ins.$procmux$927 ($mux).
Removed cell top.$flatten\spi_if_ins.$procmux$920 ($mux).
Removed cell top.$flatten\spi_if_ins.$procmux$909 ($mux).
Removed cell top.$flatten\spi_if_ins.$procmux$906 ($mux).
Removed cell top.$flatten\spi_if_ins.$procmux$901 ($mux).
Removed cell top.$flatten\spi_if_ins.$procmux$895 ($mux).
Removed cell top.$flatten\spi_if_ins.$procmux$871 ($mux).
Removed top 1 bits (of 3) from port B of cell top.$flatten\spi_if_ins.$procmux$858_CMP0 ($eq).
Removed top 1 bits (of 3) from mux cell top.$flatten\spi_if_ins.$procmux$848 ($mux).
Removed top 1 bits (of 3) from port B of cell top.$flatten\spi_if_ins.$eq$spi_if.v:103$20 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$flatten\spi_if_ins.$eq$spi_if.v:100$19 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$flatten\spi_if_ins.\spi.$add$spi_slave.v:35$2 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\spi_if_ins.\spi.$add$spi_slave.v:35$2 ($add).
Removed top 2 bits (of 4) from port B of cell top.$auto$opt_dff.cc:218:make_patterns_logic$1192 ($ne).
Removed top 1 bits (of 4) from port B of cell top.$auto$opt_dff.cc:218:make_patterns_logic$1175 ($ne).
Removed top 1 bits (of 5) from port B of cell top.$auto$opt_dff.cc:218:make_patterns_logic$1171 ($ne).
Removed top 1 bits (of 4) from port B of cell top.$auto$opt_dff.cc:218:make_patterns_logic$1169 ($ne).
Removed top 2 bits (of 3) from port B of cell top.$auto$opt_dff.cc:218:make_patterns_logic$1147 ($ne).
Removed top 2 bits (of 3) from port B of cell top.$auto$opt_dff.cc:218:make_patterns_logic$1138 ($ne).
Removed top 1 bits (of 3) from port B of cell top.$auto$opt_dff.cc:218:make_patterns_logic$1134 ($ne).
Removed top 2 bits (of 3) from port B of cell top.$auto$opt_dff.cc:218:make_patterns_logic$1129 ($ne).
Removed top 1 bits (of 2) from port B of cell top.$auto$opt_dff.cc:218:make_patterns_logic$1122 ($ne).
Removed top 2 bits (of 3) from port B of cell top.$auto$opt_dff.cc:218:make_patterns_logic$1103 ($ne).
Removed cell top.$flatten\io_ctrl_ins.$procmux$831 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$828 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$826 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$824 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$720 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$717 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$715 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$713 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$710 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$699 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$696 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$694 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$692 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$689 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$678 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$675 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$673 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$671 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$668 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$657 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$654 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$652 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$650 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$647 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$636 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$633 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$631 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$629 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$626 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$615 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$612 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$610 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$608 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$605 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$594 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$591 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$589 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$587 ($mux).
Removed cell top.$flatten\io_ctrl_ins.$procmux$584 ($mux).
Removed top 2 bits (of 3) from port B of cell top.$flatten\io_ctrl_ins.$procmux$582_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\io_ctrl_ins.$procmux$581_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\io_ctrl_ins.$procmux$580_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell top.$flatten\io_ctrl_ins.$procmux$507_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell top.$flatten\io_ctrl_ins.$procmux$482_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell top.$flatten\io_ctrl_ins.$procmux$481_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell top.$flatten\io_ctrl_ins.$procmux$480_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell top.$flatten\io_ctrl_ins.$procmux$479_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell top.$flatten\io_ctrl_ins.$eq$io_ctrl.v:207$30 ($eq).
Removed top 1 bits (of 3) from wire top.$flatten\spi_if_ins.$3\state_if[2:0].
Removed top 29 bits (of 32) from wire top.$flatten\spi_if_ins.\spi.$sub$spi_slave.v:78$13_Y.
Removed top 7 bits (of 8) from wire top.r_tx_data_smi.

2.14. Executing PEEPOPT pass (run peephole optimizers).

2.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 55 unused wires.
<suppressed ~1 debug messages>

2.16. Executing SHARE pass (SAT-based resource sharing).

2.17. Executing TECHMAP pass (map to technology primitives).

2.17.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

2.18. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.20. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$top.v:158$37 ($add).
  creating $macc model for $flatten\spi_if_ins.\spi.$add$spi_slave.v:35$2 ($add).
  creating $macc model for $flatten\spi_if_ins.\spi.$sub$spi_slave.v:78$13 ($sub).
  creating $alu model for $macc $flatten\spi_if_ins.\spi.$sub$spi_slave.v:78$13.
  creating $alu model for $macc $flatten\spi_if_ins.\spi.$add$spi_slave.v:35$2.
  creating $alu model for $macc $add$top.v:158$37.
  creating $alu cell for $add$top.v:158$37: $auto$alumacc.cc:485:replace_alu$1335
  creating $alu cell for $flatten\spi_if_ins.\spi.$add$spi_slave.v:35$2: $auto$alumacc.cc:485:replace_alu$1338
  creating $alu cell for $flatten\spi_if_ins.\spi.$sub$spi_slave.v:78$13: $auto$alumacc.cc:485:replace_alu$1341
  created 3 $alu and 0 $macc cells.

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

2.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$1150 ($dffe) from module top (D = $flatten\spi_if_ins.$procmux$924_Y, Q = \spi_if_ins.o_fetch_cmd, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1141 ($dffe) from module top (D = $flatten\spi_if_ins.$procmux$913_Y, Q = \spi_if_ins.o_load_cmd, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1125 ($dffe) from module top (D = $flatten\spi_if_ins.$procmux$892_Y, Q = \spi_if_ins.r_tx_data_valid, rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:764:run$1106 ($dffe) from module top (D = \spi_if_ins.w_tx_byte, Q = \spi_if_ins.spi.r_tx_byte, rval = 8'00000000).

2.21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

2.21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.9. Rerunning OPT passes. (Maybe there is more to do..)

2.21.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

2.21.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.21.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.13. Executing OPT_DFF pass (perform DFF optimizations).

2.21.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.21.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.16. Finished OPT passes. (There is nothing left to do.)

2.22. Executing MEMORY pass.

2.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.4. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.22.5. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.7. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~30 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.27.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$1155 ($dffe) from module top (D = $flatten\spi_if_ins.$procmux$936_Y, Q = \spi_if_ins.o_cs, rval = 4'0000).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 2 unused cells and 9 unused wires.
<suppressed ~3 debug messages>

2.27.5. Rerunning OPT passes. (Removed registers in this run.)

2.27.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.27.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.27.8. Executing OPT_DFF pass (perform DFF optimizations).

2.27.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.27.10. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $flatten\spi_if_ins.$procmux$848:
      Old ports: A=2'01, B=2'11, Y=$auto$wreduce.cc:454:run$1331 [1:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:454:run$1331 [1]
      New connections: $auto$wreduce.cc:454:run$1331 [0] = 1'1
    Consolidated identical input bits for $mux cell $flatten\spi_if_ins.$procmux$856:
      Old ports: A={ 1'0 $auto$wreduce.cc:454:run$1331 [1:0] }, B=3'000, Y=$flatten\spi_if_ins.$2\state_if[2:0]
      New ports: A=$auto$wreduce.cc:454:run$1331 [1:0], B=2'00, Y=$flatten\spi_if_ins.$2\state_if[2:0] [1:0]
      New connections: $flatten\spi_if_ins.$2\state_if[2:0] [2] = 1'0
    Consolidated identical input bits for $mux cell $flatten\spi_if_ins.$procmux$874:
      Old ports: A=3'100, B=3'010, Y=$flatten\spi_if_ins.$procmux$874_Y
      New ports: A=2'10, B=2'01, Y=$flatten\spi_if_ins.$procmux$874_Y [2:1]
      New connections: $flatten\spi_if_ins.$procmux$874_Y [0] = 1'0
  Optimizing cells in module \top.
Performed a total of 3 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$1132 ($dffe) from module top (D = $flatten\spi_if_ins.$procmux$874_Y [2], Q = \spi_if_ins.state_if [2], rval = 1'0).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$1132 ($dffe) from module top (D = $flatten\spi_if_ins.$2\state_if[2:0] [0], Q = \spi_if_ins.state_if [0], rval = 1'0).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.16. Rerunning OPT passes. (Maybe there is more to do..)

2.29.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

2.29.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.29.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.20. Executing OPT_DFF pass (perform DFF optimizations).

2.29.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.29.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.23. Finished OPT passes. (There is nothing left to do.)

2.30. Executing ICE40_WRAPCARRY pass (wrap carries).

2.31. Executing TECHMAP pass (map to technology primitives).

2.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.31.3. Continuing TECHMAP pass.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$ee721315a7b0169d82611b9aea01747035b97792\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$constmap:ee5af906ae0d3d414c6a0471604c553ef70c8e09$paramod$92adee9538f2381d8e5006822c900eb986d754e8\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$c2e415ef15bc3ccd2723772353a6b450d3d76206\_90_pmux for cells of type $pmux.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using template $paramod$2407ada40cc3dda6c6015be2b49b748cddb5a800\_90_pmux for cells of type $pmux.
Using template $paramod$b3b6ac92d800c6f07aa48f510f923d86a674e5a7\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~687 debug messages>

2.32. Executing OPT pass (performing simple optimizations).

2.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~252 debug messages>

2.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~282 debug messages>
Removed a total of 94 cells.

2.32.3. Executing OPT_DFF pass (perform DFF optimizations).

2.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 25 unused cells and 457 unused wires.
<suppressed ~26 debug messages>

2.32.5. Finished fast OPT passes.

2.33. Executing ICE40_OPT pass (performing simple optimizations).

2.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1338.slice[0].carry: CO=\spi_if_ins.spi.r_rx_bit_count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1341.slice[0].carry: CO=\spi_if_ins.spi.r_tx_bit_count [0]

2.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

2.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.33.4. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$2105 ($_SDFFCE_PN0P_) from module top (D = $flatten\spi_if_ins.$procmux$936.B_AND_S [3], Q = \spi_if_ins.o_cs [3], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$2104 ($_SDFFCE_PN0P_) from module top (D = $flatten\spi_if_ins.$procmux$936.B_AND_S [6], Q = \spi_if_ins.o_cs [2], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:559:simplemap_adffe_sdffe_sdffce$2103 ($_SDFFCE_PN0P_) from module top (D = $flatten\spi_if_ins.$procmux$936.B_AND_S [9], Q = \spi_if_ins.o_cs [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2280 ($_DFFE_PP_) from module top (D = $flatten\io_ctrl_ins.$procmux$553.Y_B, Q = \io_ctrl_ins.o_data_out [4], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2279 ($_DFFE_PP_) from module top (D = $flatten\io_ctrl_ins.$procmux$502.Y_B, Q = \io_ctrl_ins.o_data_out [3], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2278 ($_DFFE_PP_) from module top (D = $flatten\io_ctrl_ins.$procmux$515.Y_B, Q = \io_ctrl_ins.o_data_out [2], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2277 ($_DFFE_PP_) from module top (D = $flatten\io_ctrl_ins.$procmux$566.Y_B, Q = \io_ctrl_ins.o_data_out [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2276 ($_DFFE_PP_) from module top (D = $flatten\io_ctrl_ins.$procmux$528.Y_B, Q = \io_ctrl_ins.o_data_out [0], rval = 1'1).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2028 ($_DFFE_PP_) from module top (D = $flatten\io_ctrl_ins.$procmux$541.Y_B, Q = \io_ctrl_ins.o_data_out [7], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2027 ($_DFFE_PP_) from module top (D = $flatten\io_ctrl_ins.$procmux$478.Y_B, Q = \io_ctrl_ins.o_data_out [6], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$2026 ($_DFFE_PP_) from module top (D = $flatten\io_ctrl_ins.$procmux$490.Y_B, Q = \io_ctrl_ins.o_data_out [5], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1767 ($_DFFE_PP_) from module top (D = $procmux$463.Y_B [7], Q = \r_tx_data [7], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1766 ($_DFFE_PP_) from module top (D = $procmux$463.B_AND_S [30], Q = \r_tx_data [6], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1765 ($_DFFE_PP_) from module top (D = $procmux$463.Y_B [5], Q = \r_tx_data [5], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1764 ($_DFFE_PP_) from module top (D = $procmux$463.B_AND_S [28], Q = \r_tx_data [4], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1763 ($_DFFE_PP_) from module top (D = $procmux$463.B_AND_S [27], Q = \r_tx_data [3], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1762 ($_DFFE_PP_) from module top (D = $procmux$463.Y_B [2], Q = \r_tx_data [2], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1761 ($_DFFE_PP_) from module top (D = $procmux$463.B_AND_S [25], Q = \r_tx_data [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1760 ($_DFFE_PP_) from module top (D = $procmux$463.Y_B [0], Q = \r_tx_data [0], rval = 1'1).

2.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 19 unused cells and 12 unused wires.
<suppressed ~20 debug messages>

2.33.6. Rerunning OPT passes. (Removed registers in this run.)

2.33.7. Running ICE40 specific optimizations.

2.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.33.10. Executing OPT_DFF pass (perform DFF optimizations).

2.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.33.12. Rerunning OPT passes. (Removed registers in this run.)

2.33.13. Running ICE40 specific optimizations.

2.33.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.33.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.33.16. Executing OPT_DFF pass (perform DFF optimizations).

2.33.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.33.18. Finished OPT passes. (There is nothing left to do.)

2.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.35. Executing TECHMAP pass (map to technology primitives).

2.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.35.2. Continuing TECHMAP pass.
Using template \$_SDFFCE_PP1P_ for cells of type $_SDFFCE_PP1P_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
No more expansions possible.
<suppressed ~148 debug messages>

2.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$1338.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1341.slice[0].carry ($lut).

2.38. Executing ICE40_OPT pass (performing simple optimizations).

2.38.1. Running ICE40 specific optimizations.

2.38.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~27 debug messages>

2.38.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~120 debug messages>
Removed a total of 40 cells.

2.38.4. Executing OPT_DFF pass (perform DFF optimizations).

2.38.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 706 unused wires.
<suppressed ~1 debug messages>

2.38.6. Rerunning OPT passes. (Removed registers in this run.)

2.38.7. Running ICE40 specific optimizations.

2.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.38.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.38.10. Executing OPT_DFF pass (perform DFF optimizations).

2.38.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.38.12. Finished OPT passes. (There is nothing left to do.)

2.39. Executing TECHMAP pass (map to technology primitives).

2.39.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.39.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.40. Executing ABC pass (technology mapping using ABC).

2.40.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 353 gates and 448 wires to a netlist network with 94 inputs and 76 outputs.

2.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      96.
ABC: Participating nodes from both networks       =     228.
ABC: Participating nodes from the first network   =     102. (  84.30 % of nodes)
ABC: Participating nodes from the second network  =     126. ( 104.13 % of nodes)
ABC: Node pairs (any polarity)                    =     102. (  84.30 % of names can be moved)
ABC: Node pairs (same polarity)                   =      86. (  71.07 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      120
ABC RESULTS:        internal signals:      278
ABC RESULTS:           input signals:       94
ABC RESULTS:          output signals:       76
Removing temp directory.

2.41. Executing ICE40_WRAPCARRY pass (wrap carries).

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 2 unused cells and 377 unused wires.

2.43. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      123
  1-LUT                8
  2-LUT               31
  3-LUT               35
  4-LUT               49

Eliminating LUTs.
Number of LUTs:      123
  1-LUT                8
  2-LUT               31
  3-LUT               35
  4-LUT               49

Combining LUTs.
Number of LUTs:      123
  1-LUT                8
  2-LUT               31
  3-LUT               35
  4-LUT               49

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~464 debug messages>

2.44. Executing TECHMAP pass (map to technology primitives).

2.44.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.44.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod$81499c29ab973a0d535bdc1ad97b92c37ae5e491\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10110000 for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod$2d8ecce5c907513cebcd38ab5efe0fc26fc03464\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001011 for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100111 for cells of type $lut.
Using template $paramod$e49f6e3576ef1a6d2f58c54414dbb786af8cc869\$lut for cells of type $lut.
Using template $paramod$973818279bc95792902f3c09371fd2407d04a2a5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod$d0bf26260eea0e8530fb2e72eb38c60e28a47da8\$lut for cells of type $lut.
Using template $paramod$fb5ee0bdef1c4e74aaf1fd8efae98b46a2f5e564\$lut for cells of type $lut.
Using template $paramod$b431bfd938e35871dd0b7668e1503c7e8b9d491c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10001111 for cells of type $lut.
Using template $paramod$e94afd183fcbde4c849d3e6c314d64883b2488d5\$lut for cells of type $lut.
Using template $paramod$c3d2b1ca136b61a4c0de563fc4d3f82c9bc2587b\$lut for cells of type $lut.
Using template $paramod$cde3aa23c1efa60a470cf0f0281347d6ba585afa\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod$8f8ddc2a6dcb834305022029e1f3419442d7c8e7\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10100011 for cells of type $lut.
Using template $paramod$19ec49f31a8d230a567aa44ce3ea81a03c101e2b\$lut for cells of type $lut.
Using template $paramod$df0b68f8e63b2deb6710e23abd8b8ff0796d4897\$lut for cells of type $lut.
Using template $paramod$933f4f3e373a784da64d137def3625bdd36d1695\$lut for cells of type $lut.
Using template $paramod$45d617c2ce0041e27b541f62b0fc3c3ce441a616\$lut for cells of type $lut.
Using template $paramod$3e9c9bcc1e31dfd22f1d5e218f14444b0d427536\$lut for cells of type $lut.
Using template $paramod$41326ad8644342a66dfb051d050f2b6fbf15015b\$lut for cells of type $lut.
Using template $paramod$53ce561f80f32d4298a3beadc88b6c5c78293221\$lut for cells of type $lut.
Using template $paramod$8f83d7f4d20a76bcc1a2b95f54e6f87ec8530f23\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01001111 for cells of type $lut.
Using template $paramod$9a27f98143348d90a98e3996930e2dc7c95f5122\$lut for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod$b4f85a6321a00b090afc4e21d68e7b99eb94d149\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~724 debug messages>
Removed 0 unused cells and 267 unused wires.

2.45. Executing AUTONAME pass.
Renamed 1204 objects in module top (16 iterations).
<suppressed ~344 debug messages>

2.46. Executing HIERARCHY pass (managing design hierarchy).

2.46.1. Analyzing design hierarchy..
Top module:  \top

2.46.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.47. Printing statistics.

=== top ===

   Number of wires:                230
   Number of wire bits:            571
   Number of public wires:         230
   Number of public wire bits:     571
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                251
     SB_CARRY                        2
     SB_DFF                          7
     SB_DFFE                        78
     SB_DFFER                        1
     SB_DFFESR                      33
     SB_DFFESS                       4
     SB_DFFR                         3
     SB_LUT4                       123

2.48. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

2.49. Executing JSON backend.

Warnings: 44 unique messages, 44 total
End of script. Logfile hash: fc63117bb9, CPU: user 3.09s system 0.13s, MEM: 43.50 MB peak
Yosys 0.9+4081 (git sha1 83a21814, clang 7.0.1-8+rpi3+deb10u2 -fPIC -Os)
Time spent: 18% 11x read_verilog (0 sec), 16% 27x opt_expr (0 sec), ...
nextpnr-ice40 --lp1k --package qn84 --json top.json --pcf ./io.pcf --asc top.asc
icepack top.asc top.bin
